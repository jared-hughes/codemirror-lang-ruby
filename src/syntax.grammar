// Based on the Ruby Tree-Sitter grammar:
// https://github.com/tree-sitter/tree-sitter-ruby/blob/master/grammar.js
// line numbers in parentheses refer to the 2022-09-02 commit 
// 656abef0645caea793e33c1c773570722463e1d8 

@top Program {
  statements?
  // TODO __END__ handling (106)
}

// TODO kw<> all the reserved words

// TODO handle whitespace-sensitive tokens (34-48)

@skip { Comment }

// TODO: Remove some @left; some are here just in case
@precedence {
  complement @left,
  exponential @right,
  unaryMinus @left,
  multiplicative @left,
  additive @left,
  shift @left,
  scopeResolution @left,
  call @left,
  bitwiseAnd @left,
  bitwiseOr @left,
  comparison @left,
  relational @left,
  bitwiseAnd @left,
  parameter @left,
  bitwiseOr @left,
  comparison @left,
  relational @left,
  booleanAnd @left,
  booleanOr @left,
  range @left,
  conditional @left,
  rescue @left,
  assign @left,
  alias @left,
  defined @left,
  not @left,
  elementReference @left,
  assignmentCommon @left,
  or @left,
  and @left,
  // are these for tokenizers? (2)
  // curlyBlock,
  // doBlock,
  comment @left,

  // left/right only
  returnCommand @left,
  yieldCommand @left,
  breakCommand @left,
  nextCommand @left,
  return @left,
  yield @left,
  break @left,
  next @left,
  redo @left,
  retry @left,
  chainedCommandCall @left,
  blockArgument @right,
  // The !statement precedence seems to double lezer compile time,
  // but it's used to resolve shift/reduce between `statement rescue arg` and `statement`
  // Is there a better way?
  statement

  // just need @left, order doesn't matter
  commandBinary @left
}

BlockBody { statements }

statements {
  !statement
  (
    statement terminator //| ";"
  )+ statement? | 
  !statement
  statement
}

terminator { lineBreak | ";" }

BeginBlock {
  constantKw<"BEGIN"> "{" statements? "}"
}

EndBlock {
  constantKw<"END"> "{" statements? "}"
}

statement {
  Undef |
  Alias |
  IfModifier |
  UnlessModifier |
  WhileModifier |
  UntilModifier |
  RescueModifier |
  BeginBlock |
  EndBlock |
  expression
}

Method {
  kw<"def"> methodRest
}

SingletonMethod {
  kw<"def">
  (
    variable |
    "(" arg ")"
  )
  ("." | "..")
  methodRest
}

methodRest {
  methodName
  (
    // bodyExpr |
    Parameters (
      terminator? BodyStatement? kw<"end"> //| bodyExpr
    ) |
    BareParameters? terminator BodyStatement? kw<"end">
  )
}

RescueModifierArg {
  !rescue
  arg kw<"rescue"> arg
}

RescueModifierExpression {
  !rescue
  expression kw<"rescue"> arg
}

bodyExpr {
  "=" (arg | RescueModifierArg)
}

Parameters {
  "(" commaSep<formalParameter> ")"
}

BareParameters {
  simpleFormalParameter ("," formalParameter)*
}

BlockParameters {
  "|" commaSep<formalParameter> //","?
  (";" commaSep1<Identifier>) // Block shadow variables
  "|"
}

formalParameter {
  simpleFormalParameter | Parameters
}

simpleFormalParameter {
  Identifier |
  SplatParameter |
  HashSplatParameter |
  HashSplatNil |
  ForwardParameter |
  BlockParameter |
  KeywordParameter |
  OptionalParameter
}

ForwardParameter { "..." }

SplatParameter { "*" Identifier? }

HashSplatParameter { "**" Identifier? }

HashSplatNil { "**" kw<"nil"> }

BlockParameter { "&" Identifier? }

KeywordParameter {
  !parameter
  Identifier ":" arg
}

OptionalParameter {
  !parameter
  Identifier "=" arg
}

Class {
  kw<"class">  (Constant | ScopeResolution)
  (Superclass terminator | terminator?)
  BodyStatement?
  kw<"end">
}

Superclass {
  "<" expression
}

SingletonClass {
  kw<"class"> "<<"
  arg terminator
  BodyStatement? kw<"end">
}

Module {
  kw<"module"> (Constant | ScopeResolution) terminator?
  BodyStatement? kw<"end">
}

ReturnCommand { !returnCommand kw<"return"> CommandArgumentList }
YieldCommand { !yieldCommand kw<"yield"> CommandArgumentList }
BreakCommand { !breakCommand kw<"break"> CommandArgumentList }
NextCommand { !nextCommand kw<"next"> CommandArgumentList }
Return { !return kw<"return"> ArgumentList? }
Yield { !yield kw<"yield"> ArgumentList? }
Break { !break kw<"break"> ArgumentList? }
Next { !next kw<"next"> ArgumentList? }
Redo { !redo kw<"redo"> ArgumentList? }
Retry { !retry kw<"retry"> ArgumentList? }

IfModifier { !rescue statement kw<"if"> expression }
UnlessModifier { !rescue statement kw<"unless"> expression }
WhileModifier { !rescue statement kw<"while"> expression }
UntilModifier { !rescue statement kw<"until"> expression }
RescueModifier { !rescue statement kw<"rescue"> expression }

While { kw<"while"> statement Do }
Until { kw<"until"> statement Do }
For { kw<"for"> (lhs | LeftAssignmentList) kw<"in"> arg Do }
Do { (kw<"do"> | terminator) statements? kw<"end"> }

Case { kw<"case"> statement terminator? When* Else? kw<"end"> }
CaseMatch { kw<"case"> statement terminator? InClause+ Else? kw<"end"> }
When { kw<"when"> commaSep1<Pattern> (terminator | Then) }
InClause { kw<"in"> patternTopExprBody guard? (terminator | Then) }
Pattern { arg | SplatArgument }
guard {
  IfGuard { kw<"if"> expression} |
  UnlessGuard { kw<"unless"> expression }
}

patternTopExprBody {
  patternExpr |
  arrayPatternN |
  findPatternBody |
  hashPatternBody
}

arrayPatternN {
  patternExpr "," |
  patternExpr "," (patternExpr | arrayPatternN) |
  SplatParameter ("," patternExpr)*
}

patternExpr { AsPattern | patternExprAlt }

AsPattern { patternExpr "=>" Identifier }

patternExprAlt { AlternativePattern | patternExprBasic }

AlternativePattern { patternExprBasic ("|" patternExprBasic)+ }

arrayPatternBody { patternExpr | arrayPatternN }

// TODO: combine ArrayPattern, FindPattern, HashPattern into a single generic
ArrayPattern {
  "[" arrayPatternBody? "]" |
  patternConstant "[" arrayPatternBody? "]" |
  patternConstant "(" arrayPatternBody? ")"
}

findPatternBody { SplatParameter ("," patternExpr)+ "," SplatParameter }

FindPattern {
  "[" findPatternBody "]" |
  patternConstant "[" findPatternBody "]" |
  patternConstant "(" findPatternBody ")"
}

hashPatternBody {
  commaSep1<KeywordPattern> //","?
  // commaSep1<KeywordPattern> "," hashPatternAnyRest |
  | hashPatternAnyRest
}

KeywordPattern {
  (Identifier | Constant | IdentifierSuffix | ConstantSuffix | String)
  ":" patternExpr?
}

hashPatternAnyRest { HashSplatParameter | HashSplatNil }

HashPattern {
  "{" hashPatternBody? "}" |
  patternConstant "[" hashPatternBody "]" |
  patternConstant "(" hashPatternBody ")"
}

patternExprBasic {
  patternValue |
  Identifier |
  ArrayPattern |
  FindPattern |
  HashPattern |
  ParenthesizedPattern
}

ParenthesizedPattern { "(" patternExpr ")" }

patternValue {
  patternPrimitive |
  patternRange |
  VariableReferencePattern |
  ExpressionReferencePattern |
  patternConstant
}

patternRange {
  patternPrimitive (".." | "...") patternPrimitive |
  (".." | "...") patternPrimitive |
  patternPrimitive (".." | "...")
}

patternPrimitive {
  patternLiteral |
  Lambda
}

patternLiteral {
  literal |
  String |
  Subshell |
  // HeredocBeginning |
  Regex |
  StringArray |
  SymbolArray |
  keywordVariable
}

keywordVariable { Nil | Self | True | False | Line | File | Encoding }

VariableReferencePattern { "^" (Identifier | nonlocalVariable) }
ExpressionReferencePattern { "^" "(" expression ")" }

patternConstant {
  Constant |
  patternConstant? "::" Constant
}

If { kw<"if"> statement (terminator | Then) (Else | Elsif)? kw<"end"> }
Unless { kw<"unless"> statement (terminator | Then) (Else | Elsif)? kw<"end"> }
Elsif { kw<"elsif"> statement (terminator | Then) (Else | Elsif)? }
Else { kw<"else"> terminator? statements? }
Then {
  terminator statements |
  terminator? kw<"then"> statements
}
Begin { kw<"begin"> terminator? BodyStatement? kw<"end"> }
Ensure { kw<"ensure"> statements? }
Rescue { kw<"rescue"> Exceptions? ExceptionVariable? (terminator | Then) }
Exceptions { commaSep1<arg | SplatArgument> }
ExceptionVariable { "=>" lhs }

BodyStatement {
  statements (Rescue | Else | Ensure)* |
  statements? (Rescue | Else | Ensure)+
}

// Following comment copied verbatim except for translating the rule names

// Method calls without parentheses (aka "command calls") are only allowed
// in certain positions, like the top-level of a statement, the condition
// of a postfix control-flow operator like `If`, or as the value of a
// control-flow statement like `Return`. In many other places, they're not
// allowed.
//
// Because of this distinction, a lot of rules have two variants: the
// normal variant, which can appear anywhere that an expression is valid,
// and the "command" varaint, which is only valid in a more limited set of
// positions, because it can contain "command calls".
//
// The `expression` rule can appear in relatively few places, but can
// contain command calls. The `arg` rule can appear in many more places,
// but cannot contain command calls (unless they are wrapped in parens).
// This naming convention is based on Ruby's standard grammar.

expression {
  CommandBinary |
  CommandUnary |
  // CommandAssignment |
  // CommandOperatorAssignment |
  // CommandCall |
  // CommandCallWithBlock |
  // chainedCommandCall |
  // ReturnCommand |
  // YieldCommand |
  // BreakCommand |
  // NextCommand |
  arg
}

arg {
  unaryMinusPow |
  primary |
  // Assignment |
  // OperatorAssignment |
  Conditional |
  Range |
  Binary |
  Unary
}

unaryMinusPow { unaryMinusNum pow }
// TODO check: in the place of arg, the tree-sitter grammar has 
// `field('right', $._arg, $.binary)`. 3-argument field? I haven't found docs
// for this; should it be arg or Binary, or is that just arg aliased to Binary?
pow { !exponential simpleNumeric "**" arg }

primary {
  ParenthesizedStatements |
  lhs |
  functionIdentifierCall |
  Call |
  Array |
  StringArray|
  SymbolArray |
  Hash |
  Subshell |
  literal |
  String |
  Character |
  ChainedString |
  Regex |
  Lambda |
  Method |
  SingletonMethod |
  Class |
  SingletonClass |
  Module |
  Begin |
  While |
  Until |
  If |
  Unless |
  For |
  Case |
  CaseMatch |
  Return |
  Yield |
  Break |
  Next |
  Redo |
  Retry |
  ParenthesizedUnary
  // | HeredocBeginning
}

ParenthesizedStatements { "(" statements? ")" }

ElementReference {
  !elementReference
  primary "[" argumentListWithTrailingComma "]"
}

ScopeResolution {
  !scopeResolution
  primary? "::" Constant
}

callOperator {
  "." | "&." //| "::"
}
call {
  !call
  primary callOperator (Identifier | Operator | Constant | functionIdentifier)
}
CommandCall {
  call |
  chainedCommandCall |
  (variable | functionIdentifier) |
  CommandArgumentList
}
CommandCallWithBlock {
  (call | variable | functionIdentifier)
  CommandArgumentList
  (Block | DoBlock)
}
chainedCommandCall {
  !chainedCommandCall
  CommandCallWithBlock callOperator
  (Identifier | functionIdentifier | Operator | Constant)
}
Call {
  callReceiverArguments (Block | DoBlock)?
  callReceiver (Block | DoBlock)
}
callReceiver {
  call | variable | functionIdentifier
}
callReceiverArguments {
  (callReceiver | !call primary callOperator) ArgumentList
}
CommandArgumentList { commaSep1<argument> }
ArgumentList { "(" argumentListWithTrailingComma? ")" }
argumentListWithTrailingComma {
  commaSep1<argument> // ","?
}
argument {
  expression |
  SplatArgument |
  HashSplatArgument |
  ForwardArgument |
  BlockArgument |
  Pair
}
ForwardArgument { "..." }
SplatArgument { "*" arg }
HashSplatArgument { "**" arg }
BlockArgument {
  !blockArgument
  "&" arg?
}

DoBlock {
  kw<"do"> terminator? (BlockParameters terminator?)? BodyStatement? kw<"end">
}

Block {
  "{" BlockParameters BlockBody? "}"
}

argRHS {
  arg |
  RescueModifierArg
}

Assignment {
  !assign
  (lhs | LeftAssignmentList)
  "="
  (argRHS | SplatArgument | RightAssignmentList)
}

CommandAssignment {
  !assign
  (lhs | LeftAssignmentList)
  "="
  (expression | RescueModifierExpression | RescueModifier)
}

assignmentOperator {
  "+=" | "-=" | "*=" | "**=" | "/=" | "||=" | "|=" | "&&=" | "&=" |
  "%=" | ">>=" | "<<=" | "^="
}

OperatorAssignment {
  !assign
  lhs assignmentOperator argRHS
}

CommandOperatorAssignment {
  !assign
  lhs assignmentOperator (expression RescueModifierExpression)
}

Conditional {
  !conditional
  arg "?" arg ":" arg
}

Range {
  !range
  (arg (".." | "...") arg? |
  (".." | "...") arg)
}

Binary {
  arg !and kw<"and"> arg |
  arg !or kw<"or"> arg |
  arg !booleanAnd "&&" arg |
  arg !booleanOr "||" arg |
  arg !shift ("<<" | ">>") arg |
  arg !comparison ("<" | "<=" | ">=" | ">") arg |
  arg !bitwiseAnd "&" arg |
  arg !bitwiseOr ("^" | "|") arg |
  arg !additive ("+" | "-") arg |
  arg !multiplicative ("/" | "%" | "*") arg |
  arg !relational ("==" | "!=" | "===" | "<=>" | "=~" | "!~") arg |
  arg !exponential "**" arg
}

CommandBinary {
  !commandBinary
  expression (kw<"or"> | kw<"and">) expression
}

Unary {
  !defined kw<"defined?"> arg |
  !not kw<"not"> arg |
  !unaryMinus ("-" | "+") arg |
  !complement ("!" | "~") arg
}

CommandUnary {
  !defined kw<"defined?"> expression |
  !not kw<"not"> expression |
  !unaryMinus ("-" | "+") expression |
  !complement ("!" | "~") expression
}

ParenthesizedUnary {
  !call (kw<"defined?"> | kw<"not">) ParenthesizedStatements
}

UnaryLiteral {
  !unaryMinus ("-" | "+") simpleNumeric
}

literal { SimpleSymbol | DelimitedSymbol | numeric }
numeric { simpleNumeric | UnaryLiteral }
simpleNumeric { Integer | Float | Complex | Rational }

RightAssignmentList {
  !assignmentCommon commaSep1<arg | SplatArgument>
}

LeftAssignmentList { mlhs } // ???
mlhs {
  !assignmentCommon
  commaSep1<
    //lhs |
    RestAssignment | DestructuredLeftAssignment> //","?
}
DestructuredLeftAssignment { !assignmentCommon "(" mlhs ")" }
RestAssignment { !assignmentCommon "*" lhs? }

functionIdentifier { IdentifierSuffix | ConstantSuffix }
functionIdentifierCall { functionIdentifier } // left prec
lhs {
  variable | True | False | Nil //| ScopeResolution
  //| ElementReference
  | call
}
variable { Self | Super | nonlocalVariable | Identifier | Constant }

Operator {
  ".." | "|" | "^" | "&" | "<=>" | "==" | "===" | "=~" | ">" | ">=" | "<" |
  "<=" | "+" | "-" | "*" | "/" | "%" | "!" | "!~" | "**" | "<<" | ">>" | "~" |
  "+@" | "-@" | "~@" | "[]" | "[]=" | "`"
}

methodName {
  Identifier | functionIdentifier | Constant | // Setter { Identifier "=" } |
  SimpleSymbol | DelimitedSymbol | Operator | nonlocalVariable
}

nonlocalVariable { InstanceVariable | ClassVariable | GlobalVariable }

Undef { kw<"undef"> commaSep1<methodName> }
Alias { kw<"alias"> methodName methodName }

Array { "[" argumentListWithTrailingComma? "]" }

Hash {
  "{"
  (
    commaSep1<Pair | HashSplatArgument> //","?
  )?
  "}"
}

Pair {
  arg "=>" arg |
  String ":" arg |
  (// TODO: HashKeySymbol |
    Identifier | Constant | IdentifierSuffix | ConstantSuffix) ":" arg?
}

Lambda {
  "->" (Parameters | BareParameters) (Block | DoBlock)
}

Super { kw<"super"> }
Self { kw<"self"> }
True { kw<"true"> }
False { kw<"false"> }
Nil { kw<"nil"> }
Line { kw<"__LINE__"> }
File { kw<"__FILE__"> }
Encoding { kw<"__ENCODING__"> }

// General helpers

commaSep<content> { "" | content ("," content)* }
commaSep1<content> { content ("," content)* }

kw<term> { @specialize[@name={term}]<Identifier, term> }
constantKw<term> { @specialize[@name={term}]<Constant, term> }

@tokens {
  idChars { ![\x00-\x1F\s:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[\]{}]* }
  lowerAlphaChar { ![\x00-\x1F\sA-Z0-9:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[\]{}] }
  alphaChar { ![\x00-\x1F\s0-9:;`"'@$#.,|^&<=>+\-*/\\%?!~()\[\]{}] }


  @precedence { Comment, "=" }
  Comment {
    "#" ![\n\r]* |
    "=begin" ![\n\r]* $[\r]?$[\n] (
      ![=] | "="![e] | "=e"![n] | "=en"![d]
    )* "=end" ![\n\r]*
  }

  @precedence { Complex, Rational, Float, Integer }
  Integer {
    digits |
    "0" $[bB] $[01] ("_"? $[01])* |
    "0" $[oO] $[0-7] ("_"? $[0-7])* |
    ("0" $[dD])? digits |
    "0" $[xX] $[0-9a-fA-F] ("_"? $[0-9a-fA-F])*
  }

  Float {
    digits "." digits floatEpart? |
    digits floatEpart
  }
  floatEpart { $[eE] $[+-]? digits }
  digits {  @digit ("_"? @digit)* }
  intOrFloat { Integer | Float }
  
  @precedence { unaryMinusNum "-" }
  unaryMinusNum { "-" intOrFloat }
  Complex { intOrFloat ("i" | "ri") }
  Rational { intOrFloat "r" }

  @precedence { ConstantSuffix, Constant }
  Constant { $[A-Z] idChars }
  ConstantSuffix { $[A-Z] idChars "?" } // choice with `_constant_suffix` (1071)?
  @precedence { IdentifierSuffix, Identifier }
  Identifier { lowerAlphaChar idChars }
  IdentifierSuffix { lowerAlphaChar idChars "?" } // choice with `_identifier_suffix` (1073)?
  InstanceVariable { "@" alphaChar idChars }
  ClassVariable { "@@" alphaChar idChars }
  GlobalVariable {
    "$"
    (
      "-" $[a-zA-Z0-9_] |
      $[!@&`'+~=/\\,;.<>*$?:"] |
      $[0-9]+ |
      $[a-zA-Z_]$[a-zA-Z0-9_]*
    )
  }
  ChainedString { String String+ }

  // FIXME: can this be !@whitespace?
  whitespaceComplement { ![ \r\n\t\f\v] }

  // FIXME: Character-"?" precedence depends on whitespace
  @precedence { Character, "?" }
  Character {
    "?"
    (
      "\\" whitespaceComplement (
        "{" $[0-9A-Fa-f]* "}" |
        $[0-9A-Fa-f]* |
        "-" whitespaceComplement ($[MC] "-" whitespaceComplement)?
      )?|
      whitespaceComplement
    )
  }

  Interpolation {
    // TODO
    // "#{" statements? "}" |
    // shortInterpolation nonlocalVariable
    "a"
  }

  String { '"' literalContents? '"' }
  Subshell { "`" literalContents "`" }
  StringArray {
    "%w(" @whitespace+ (literalContents @whitespace+)*
    literalContents @whitespace? ")"
  }
  SymbolArray {
    "%i(" @whitespace+ (literalContents @whitespace+)*
    literalContents @whitespace? ")"
  }
  DelimitedSymbol {
    ':"' literalContents? '"'
  }
  Regex { "/" literalContents "/" }
  HeredocBody {
    heredocBodyStart
    (HeredocContent | Interpolation | EscapeSequence)*
    HeredocEnd
  }

  literalContents {
    (StringContent | Interpolation | EscapeSequence)+
  }

  // https://ruby-doc.org/core-2.5.0/doc/syntax/literals_rdoc.html#label-Strings
  EscapeSequence {
    "\\" (
      ![^ux0-7] | // single character
      "x" $[0-9a-fA-F] $[0-9a-fA-F]? |
      $[0-7] ($[0-7] $[0-7]?)? |
      "u" $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] |
      "u{" $[0-9a-fA-F ]+ "}"
    )
  }

  // TODO check externals (37)

  // TODO SimpleSymbol
  SimpleSymbol { ":" "idk" }
  // TODO StringContent
  StringContent { "a" }

  // CHECK lineBreak: does this need to be based on crossing newline?
  lineBreak { "\n" }

  // TODO: check token.immediate(...)

  // misc tokens
  "-"
}

@detectDelim
